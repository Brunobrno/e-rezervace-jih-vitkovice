<Container fluid className="py-3">
      <Row>
        <Col md={8}>
          {/* Legend */}
          <Stack direction="horizontal" gap={2} className="mb-3">
            <Badge bg="success">
              Aktivní
            </Badge>
            <Badge bg="warning">
              Rezervováno
            </Badge>
            <Badge bg="danger">
              Blokováno
            </Badge>
          </Stack>

          {/* Action Buttons */}
          <Stack direction="horizontal" gap={2} className="mb-3">
            <Button
              variant="danger"
              size="sm"
              onClick={() => handleDeleteReservation(selectedIndex)}
              disabled={selectedIndex === null}
            >
              <i className="bi bi-trash me-1"></i> Smazat vybranou
            </Button>

            <Button
              variant="warning"
              size="sm"
              onClick={handleClearAll}
              disabled={reservations.length === 0}
            >
              <i className="bi bi-x-circle me-1"></i> Smazat vše
            </Button>

            <Button
              variant="success"
              size="sm"
              onClick={generateReservationJson}
              disabled={reservations.length === 0}
            >
              <i className="bi bi-download me-1"></i> Uložit jako JSON
            </Button>
          </Stack>

          {/* Grid Container */}
          <div
            ref={gridRef}
            className="position-relative border"
            onMouseDown={handleMouseDown}
            onMouseMove={handleMouseMove}
            onMouseUp={handleMouseUp}
            onMouseLeave={handleMouseUp}
            onContextMenu={(e) => e.preventDefault()}
            style={{
              width: cols * cellSize,
              height: rows * cellSize,
              display: "grid",
              gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,
              gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,
            }}
          >
            {gridCells}

            {/* Reservation Boxes */}
            {reservations.map((res, i) => (
              <div
                key={i}
                data-index={i}
                className={`reservation ${res.status} ${
                  draggedIndex === i ? "dragging" : ""
                }`}
                onContextMenu={(e) => {
                  e.preventDefault();
                  handleDeleteReservation(i);
                }}
                style={{
                  position: "absolute",
                  left: res.x * cellSize,
                  top: res.y * cellSize,
                  width: res.w * cellSize,
                  height: res.h * cellSize,
                  backgroundColor: statusColors[res.status],
                  border: i === selectedIndex ? "2px solid black" : "none",
                  fontSize: 12,
                  textAlign: "center",
                  transition:
                    draggedIndex === i || resizingIndex === i
                      ? "none"
                      : "all 0.2s ease",
                  zIndex: 2,
                }}
              >
                <div className="d-flex flex-column h-100 p-1">
                  <div className="flex-grow-1 d-flex align-items-center justify-content-center">
                    <strong>{i + 1}</strong>
                  </div>
                  <Form.Select
                    size="sm"
                    value={res.status}
                    onChange={(e) => handleStatusChange(i, e.target.value)}
                    onClick={(e) => e.stopPropagation()}
                  >
                    <option value="active">Aktivní</option>
                    <option value="reserved">Rezervováno</option>
                    <option value="blocked">Blokováno</option>
                  </Form.Select>
                </div>
                <div
                  className="resize-handle"
                  style={{
                    position: "absolute",
                    right: 0,
                    bottom: 0,
                    width: 10,
                    height: 10,
                    backgroundColor: "white",
                    border: "1px solid black",
                    cursor: "nwse-resize",
                  }}
                />
              </div>
            ))}

            {/* Draft preview box */}
            {isDragging && startCell && hoverCell && (
              <div
                className="reservation-draft"
                style={{
                  position: "absolute",
                  left: Math.min(startCell.x, hoverCell.x) * cellSize,
                  top: Math.min(startCell.y, hoverCell.y) * cellSize,
                  width: (Math.abs(startCell.x - hoverCell.x) + 1) * cellSize,
                  height: (Math.abs(startCell.y - hoverCell.y) + 1) * cellSize,
                  backgroundColor: "rgba(0, 128, 0, 0.3)",
                  pointerEvents: "none",
                  zIndex: 1,
                }}
              />
            )}
          </div>

          {/* File Upload */}
          <Form.Group className="mt-3">
            <Form.Label>Nahrát rezervace ze souboru:</Form.Label>
            <Form.Control
              type="file"
              size="sm"
              accept=".json"
              onChange={(e) => {
                const file = e.target.files[0];
                if (!file) return;
                handleFileUpload(file);
                e.target.value = ""; // Reset input
              }}
            />
          </Form.Group>
        </Col>
      </Row>
    </Container>